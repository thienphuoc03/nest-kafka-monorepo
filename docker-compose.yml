version: '3'

services:
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - '2181:2181'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - '9092:9092'
    environment:
      # KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://kafka:9093,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  postgres:
    image: postgres
    container_name: postgres
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    ports:
      - '5050:80'
    environment:
      PGADMIN_DEFAULT_EMAIL: postgres@gmail.com
      PGADMIN_DEFAULT_PASSWORD: postgres
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - postgres
#   api-gateway:
#     build:
#       context: .
#       dockerfile: Dockerfile
#     container_name: api-gateway
#     ports:
#       - '3000:3000'
#     depends_on:
#       - postgres
#       - kafka
#     environment:
#       KAFKA_HOST: kafka:9092
#       KAFKA_TOPIC: test
#       KAFKA_GROUP_ID: test-group
#       POSTGRES_HOST: postgres
#       POSTGRES_PORT: 5432
#       POSTGRES_USER: postgres
#       POSTGRES_PASSWORD: postgres
#       POSTGRES_DB: postgres
#     env_file:
#       - .env
#     networks:
#       - backend-network
#     volumes:
#       - .:/usr/src/app
#       - /usr/src/app/node_modules
#   user-microservice:
#     build:
#       context: .
#       dockerfile: ./apps/users/Dockerfile
#     container_name: user-microservice
#     command: npm run start:dev users
#     depends_on:
#       - postgres
#       - kafka
#     environment:
#       KAFKA_HOST: kafka:9092
#       KAFKA_TOPIC: test
#       KAFKA_GROUP_ID: test-group
#     env_file:
#       - ./apps/users/.env
#     volumes:
#       - .:/usr/src/app
#       - /usr/src/app/node_modules
#     networks:
#       - backend-network
#   products-microservice:
#     build:
#       context: .
#       dockerfile: ./apps/products/Dockerfile
#     container_name: products-microservice
#     command: npm run start:dev products
#     depends_on:
#       - postgres
#       - kafka
#     environment:
#       KAFKA_HOST: kafka:9092
#       KAFKA_TOPIC: test
#       KAFKA_GROUP_ID: test-group
#     env_file:
#       - ./apps/products/.env
#     volumes:
#       - .:/usr/src/app
#       - /usr/src/app/node_modules
#     networks:
#       - backend-network
# networks:
#   backend-network:
#     driver: bridge
